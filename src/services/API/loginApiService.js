import db from "../../models/index"
import bcrypt from 'bcryptjs';
import checkApiService from "./checkApiService";
import jwtActions from '../../middleware/JWTAction';
const salt = bcrypt.genSaltSync(10);

// ---------------------------------------------------------
const signInUserByEmail = async ( email, password ) => {
	try {
		console.log("üì• [LOGIN SERVICE] Input:", email, password);

		const user = await db.User.findOne({
			where: { email: email},
			raw: true,
			nest: true
		});

		if (!user) {
			console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n:", email);
			return { EM: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!', EC: 1, DT: "" };
		}

		console.log("‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng:", user.name);

		const isMatch = checkApiService.checkPassword(password, user.password);
		if (!isMatch) {
			return { EM: 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p!', EC: 1, DT: "" };
		}

		const payloadToken = {
			user_id: user.user_id,
			email: user.email,
			name: user.name,
			avatar: user.avatar,
            phone: user.phone,
		};

		return {
			EM: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
			EC: 0,
			DT: {
				access_token: jwtActions.createJWT(payloadToken),
				...payloadToken
			}
		};
	} catch (error) {
		console.error(error);
		return { EM: "L·ªói h·ªá th·ªëng...", EC: -1 };
	}
};

// ---------------------------------------------------------
const singInUserByPhone = async ( phone, password ) => {
	try {
		console.log("üì• [LOGIN SERVICE] Input:", phone, password);

		const user = await db.User.findOne({
			where: { phone: phone },
			raw: true,
			nest: true
		});

		if (!user) {
			console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n:", phone);
			return { EM: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!', EC: 1, DT: "" };
		}

		console.log("‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng:", user.name);

		const isMatch = checkApiService.checkPassword(password, user.password);
		if (!isMatch) {
			return { EM: 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p!', EC: 1, DT: "" };
		}

		const payloadToken = {
			user_id: user.user_id,
			email: user.email,
			name: user.name,
			avatar: user.avatar,
            phone: user.phone,
		};

		return {
			EM: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
			EC: 0,
			DT: {
				access_token: jwtActions.createJWT(payloadToken),
				...payloadToken
			}
		};
	} catch (error) {
		console.error(error);
		return { EM: "L·ªói h·ªá th·ªëng...", EC: -1 };
	}
};

// ---------------------------------------------------------
export default {
    signInUserByEmail, singInUserByPhone
}